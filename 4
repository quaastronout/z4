def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var53 = func8()
    var59 = var56(arg2, arg1)
    result = arg1 ^ (arg2 & var59) - var53 | (-385 | 248) + (-136144618 ^ -545711479)
    return result
def func11(arg57, arg58):
    result = ((arg57 - ((1478130077 | (arg57 & 211429527) ^ -1819421274 ^ arg57 + 1022852735) | -50) + -138514617) + arg58) + 1088066926 - 1984118475
    return result
def func10():
    closure = [-4]
    def func9(arg54, arg55):
        closure[0] += func11(arg54, arg55)
        return closure[0]
    func = func9
    return func
var56 = func10()
def func8():
    func2()
    result = len(func4(-6, -7))
    func3()
    return result
def func5(arg5, arg6):
    def func6(arg7, arg8):
        var9 = arg5 | arg8 - arg8 + arg5
        var10 = ((var9 - arg8) - arg8) & -7
        var11 = arg6 | var10
        var12 = arg5 ^ arg7
        if arg8 < var12:
            var13 = arg5 ^ (arg5 & arg7) - var9
        else:
            var13 = (-660124348 ^ var10 + 627) ^ arg6
        var14 = ((-198 + var12) | var9) ^ arg6
        if arg6 < var12:
            var15 = var14 - var11 & arg7
        else:
            var15 = arg7 - ((arg5 - arg6) ^ var14)
        var16 = var11 & arg5 ^ var9
        var17 = arg5 + var16 + arg7 ^ var10
        var18 = ((var14 & 68) - var9) - var9
        var19 = var12 - arg6 ^ var12 - var11
        var20 = var18 & arg6 - var18 | var10
        var21 = (204880987 - var12) | arg8 | var14
        var22 = arg8 - (var12 + var16)
        var23 = arg8 | (var12 ^ var9 & 1310516612)
        var24 = -30657951 | var14 ^ -1099430313 - var22
        result = (var10 & (var14 | arg5 ^ -655)) & 872
        return result
    var25 = func6(arg5, arg6)
    var30 = func7(var25, arg5)
    var31 = 360561352 & 777
    var32 = 462140163 - (arg6 + arg5 & -1166366251)
    var33 = arg6 - arg6 + -59 - var25
    var34 = var32 & 1245131439
    var35 = var30 - 162 + var31
    var36 = -1976729321 - -226413805
    var37 = var36 - ((arg5 | var30) - var36)
    var38 = arg6 - var25
    var39 = var37 ^ var38
    var40 = -540 + (852 - var32 - var30)
    var41 = var38 ^ var39 + var34 + var33
    result = ((var31 - var25) ^ ((var37 - (((var40 | var25) ^ var36) | var36) + var38) & var32 - var31)) & var37 ^ var33
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(17):
        if arg26 < var29:
            var28 += arg26 - arg27 | arg27
        else:
            var28 += -9 - arg26
    return var28
def func4(arg3, arg4):
    var42 = func5(-674132305, 136)
    yield var42
    var43 = arg4 + (-340 - arg4) ^ -294839816
    yield var43
    var44 = ((arg3 | arg3) | arg4) - -1569961930
    yield var44
    var45 = (var44 & -506) & var44 ^ 39530130
    yield var45
    var46 = (arg3 & arg3) - var43 & arg3
    yield var46
    var47 = var46 & var46 & (arg3 + var43)
    yield var47
    var48 = ((var45 & var45) | var45) ^ var47
    yield var48
    var49 = var46 ^ (arg3 ^ var45) + var46
    yield var49
    var50 = var47 | arg3
    yield var50
    var51 = var49 ^ (var49 + var48) & var43
    yield var51
    var52 = var44 | (var46 + -1923236971) ^ var46
    yield var52
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 60'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
